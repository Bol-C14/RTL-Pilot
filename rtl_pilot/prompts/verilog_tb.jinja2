`timescale 1ns / 1ps

////////////////////////////////////////////////////////////////////////////////
// Generated Testbench for {{ design.module_name }}
// Generated by RTL-Pilot on {{ timestamp }}
////////////////////////////////////////////////////////////////////////////////

module {{ design.module_name }}_tb;

    // Parameters
    {% for param in design.parameters %}
    parameter {{ param.name }} = {{ param.value }};
    {% endfor %}
    
    // Clock and Reset
    {% for clk in design.clock_domains %}
    reg {{ clk.name }};
    parameter {{ clk.name.upper() }}_PERIOD = {{ clk.period }}ns;
    {% endfor %}
    
    {% for rst in design.reset_signals %}
    reg {{ rst.name }};
    {% endfor %}
    
    // DUT Interface Signals
    {% for port in design.ports %}
    {% if port.direction == "input" %}
    reg {{ port.width }}{{ port.name }};
    {% else %}
    wire {{ port.width }}{{ port.name }};
    {% endif %}
    {% endfor %}
    
    // Test Control Signals
    reg test_start;
    reg test_done;
    integer test_case_num;
    integer error_count;
    
    // DUT Instantiation
    {{ design.module_name }} dut (
        {% for port in design.ports %}
        .{{ port.name }}({{ port.name }}){% if not loop.last %},{% endif %}
        {% endfor %}
    );
    
    // Clock Generation
    {% for clk in design.clock_domains %}
    initial begin
        {{ clk.name }} = 0;
        forever #({{ clk.name.upper() }}_PERIOD/2) {{ clk.name }} = ~{{ clk.name }};
    end
    {% endfor %}
    
    // Reset Generation
    initial begin
        {% for rst in design.reset_signals %}
        {{ rst.name }} = {{ rst.active_level }};
        {% endfor %}
        
        #({{ design.reset_duration | default("100") }}ns);
        
        {% for rst in design.reset_signals %}
        {{ rst.name }} = {{ "1" if rst.active_level == "0" else "0" }};
        {% endfor %}
    end
    
    // Test Stimulus
    initial begin
        // Initialize signals
        test_start = 0;
        test_done = 0;
        test_case_num = 0;
        error_count = 0;
        
        {% for port in design.ports %}
        {% if port.direction == "input" and port.name not in [clk.name for clk in design.clock_domains] + [rst.name for rst in design.reset_signals] %}
        {{ port.name }} = 0;
        {% endif %}
        {% endfor %}
        
        // Wait for reset deassertion
        wait({% for rst in design.reset_signals %}{{ rst.name }} == {{ "1" if rst.active_level == "0" else "0" }}{% if not loop.last %} && {% endif %}{% endfor %});
        
        // Start test execution
        test_start = 1;
        
        $display("=== Starting Testbench for {{ design.module_name }} ===");
        $display("Time: %0t", $time);
        
        {% for scenario in scenarios %}
        // Test Scenario: {{ scenario.name }}
        // Description: {{ scenario.description }}
        run_test_scenario_{{ loop.index }}();
        {% endfor %}
        
        // Test completion
        test_done = 1;
        
        $display("=== Testbench Completed ===");
        $display("Total test cases: %0d", test_case_num);
        $display("Errors found: %0d", error_count);
        
        if (error_count == 0) begin
            $display("*** ALL TESTS PASSED ***");
        end else begin
            $display("*** %0d TESTS FAILED ***", error_count);
        end
        
        $finish;
    end
    
    {% for scenario in scenarios %}
    // Test Scenario {{ loop.index }}: {{ scenario.name }}
    task run_test_scenario_{{ loop.index }}();
        begin
            test_case_num = test_case_num + 1;
            $display("Running test scenario {{ loop.index }}: {{ scenario.name }}");
            
            // TODO: Implement specific test vectors for {{ scenario.name }}
            {% for vector in scenario.test_vectors %}
            // Test vector {{ loop.index }}
            {% for signal, value in vector.inputs.items() %}
            {{ signal }} = {{ value }};
            {% endfor %}
            
            // Wait for response
            repeat({{ vector.wait_cycles | default("10") }}) @(posedge {{ design.clock_domains[0].name if design.clock_domains else "clk" }});
            
            // Check outputs
            {% for signal, expected in vector.expected_outputs.items() %}
            if ({{ signal }} !== {{ expected }}) begin
                $error("Test vector {{ loop.index }} failed: {{ signal }} = %0d, expected %0d", {{ signal }}, {{ expected }});
                error_count = error_count + 1;
            end
            {% endfor %}
            {% endfor %}
            
            $display("Test scenario {{ loop.index }} completed");
        end
    endtask
    {% endfor %}
    
    // Monitoring and Debug
    initial begin
        $monitor("Time: %0t | {% for port in design.ports %}{{ port.name }}=%0d {% endfor %}", 
                 $time{% for port in design.ports %}, {{ port.name }}{% endfor %});
    end
    
    // Waveform dumping
    initial begin
        $dumpfile("{{ design.module_name }}_tb.vcd");
        $dumpvars(0, {{ design.module_name }}_tb);
    end
    
    // Timeout watchdog
    initial begin
        #{{ settings.simulation_timeout | default("10ms") }};
        $error("Simulation timeout reached");
        $finish;
    end

endmodule
